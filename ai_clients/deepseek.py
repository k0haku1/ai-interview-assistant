import requests
import time
import json
from config import DEEPSEEK_API_KEY

class DeepSeekClient:
    def __init__(self):
        self.endpoint = "https://api.intelligence.io.solutions/api/v1/chat/completions"
        self.messages = [
            {
                "role": "system",
                "content": (
                    "Ты AI-помощник для собеседований по программированию. "
                    "Отвечай строго на русском языке во всех случаях, даже для SQL, Go или алгоритмов. "
                    "У тебя три задачи: "
                    "1) Если на входе код — проведи код ревью: оцени стиль, архитектуру, эффективность, возможные ошибки. "
                    "   Дай рекомендации по разделению ответственности у функций/структур и предложи улучшения. "
                    "Обязательно: добавь построчные комментарии к коду (как в ревью Pull Request). "
                    "Особенно внимательно смотри со стороны многгопоточки и оптимизации работы горутин"
                    "2) Если на входе алгоритмическая задача — реши её на Go. "
                    "   Обязательно: добавь построчные комментарии к коду (как в ревью Pull Request). "
                    "   В комментариях объясни, что делает каждая ключевая строка. "
                    "   После кода объясни общий ход решения и оцени сложность (по времени и памяти). "
                    "   При возможности предложи, как сэкономить ресурсы (например, оптимизация памяти или времени). "
                    "3) Если на входе задача на SQL (создание таблиц или запрос) — ориентируйся на PostgreSQL. "
                        "Для выборки давай два варианта:\n"
                        "   a) Простой, читаемый вариант — для понимания логики.\n"
                        "   b) Оптимизированный вариант через JOIN/агрегаты — чтобы работал быстрее на больших таблицах.\n"
                        "В комментариях объясняй, что делает каждая ключевая строка, и указывай, где лучше использовать каждый вариант.\n\n"
                    "Отвечай структурированно, без лишней воды."
                )
            }
        ]

        self.option_prompts = {
            "result": (
                "Проанализируй данный код и покажи исходный фрагмент с комментариями, "
                "где есть ошибки или потенциальные проблемы, объясни, почему это ошибка. "
                "Если возможно, покажи также результат работы исходного кода (или что он бы вывел). "
                "После этого предоставь полностью исправленную версию кода, при возможности "
                "с оптимизацией и улучшениями. Объясни, что делает исправленный код, "
                "какой результат он даст и почему. "
                "Сохраняй структурированный стиль: сначала анализ ошибок и исходный код с результатом, "
                "потом исправленный рабочий вариант с пояснением и ожидаемым выводом."
            ),
            "code review": "Проведи код ревью: оцени стиль, архитектуру, эффективность, возможные ошибки. Добавь построчные комментарии.",
            "add func": (
                "Сначала кратко опиши, что требуется в задаче (одним-двумя предложениями). "
                "Затем напиши функционал, который решает задачу полностью и корректно. "
                "Обязательно дай два варианта реализации: "
                "1) Простой вариант (для наглядности и понятности). "
                "2) Оптимизированный вариант (для эффективности по памяти или времени). "
                "Для каждого варианта: "
                "- Добавь построчные комментарии, что делает каждая строка кода или запроса. "
                "- После реализации дай пояснение общего хода решения. "
                "- Укажи сложность по времени и памяти (если применимо). "
                "- Приведи пример использования функции или выполнения запроса для каждого варианта. "
                "Сохраняй строгую структуру: краткое описание задачи → простой вариант → оптимизированный вариант → сравнение двух вариантов (читаемость, эффективность, ресурсы)."
            ),
            "algorithm": (
                "Реши алгоритмическую задачу на Go. "
                "Обязательно дай два варианта решения: "
                "1) Простой, читаемый вариант. "
                "2) Оптимизированный вариант (по памяти или времени). "
                "Для каждого варианта: "
                "- Добавь построчные комментарии, что делает каждая строка. "
                "- После функции дай объяснение общего хода решения. "
                "- Укажи сложность по времени и памяти. "
                "- Приведи пример использования функции (main) для каждого варианта."
            ),
            "sql": (
                "Проанализируй задачу, создай таблицы, необходимые для её решения, и напиши SQL-запрос, который решает её полностью и корректно. "
                "Обязательно учитывай все условия задачи: фильтры, агрегаты, группировки, сортировку и связи между таблицами. "
                "Если в задаче упоминаются несколько показателей (например, количество клиентов, количество заказов, сумма, среднее), "
                "они все должны быть вычислены и включены в результат. "
                "Предоставь два варианта решения: простой и оптимизированный. "
                "В простом варианте делай акцент на наглядность и понятность, но соблюдай правильность и корректный синтаксис. "
                "В оптимизированном варианте делай запрос более эффективным: минимизируй количество обращений к таблицам, используй JOIN при необходимости, избегай лишних подзапросов, "
                "подбирай подходящие агрегатные функции и сортировки. "
                "В каждом варианте объясни каждую строку запроса простым языком. "
                "Проверяй корректность всех JOIN и при необходимости используй DISTINCT для подсчета уникальных клиентов. "
                "После этого дай краткое сравнение двух вариантов по эффективности, правильности, читаемости и использованию памяти/ресурсов. "
                "Сохраняй строгую структуру ответа: сначала простой вариант с пояснением, потом оптимизированный вариант с пояснением. "
                "Не пропускай условия сортировки, фильтрации и агрегации, даже если они кажутся очевидными."
            )
        }

    def review_code(self, code: str, option: str) -> str | dict:
        prompt = self.option_prompts.get(option.lower(), "Дай подробный ответ по коду")
        self.messages.append({
            "role": "user",
            "content": f"{prompt}\n\nКод/текст для анализа:\n{code}"
        })

        headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
        data = {
            "model": "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8",
            "messages": self.messages,
            "temperature": 0.3
        }

        try:
            resp = requests.post(self.endpoint, headers=headers, json=data, timeout=30)
            resp.raise_for_status()
            answer = resp.json()['choices'][0]['message']['content']
            self.messages.append({"role": "assistant", "content": answer})
            return answer
        except requests.exceptions.Timeout:
            return {"error": "Timeout при обращении к DeepSeek API"}
        except Exception as e:
            return {"error": str(e)}
