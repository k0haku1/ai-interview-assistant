import os
import asyncio
from iointel import Agent, Workflow
from config import DEEPSEEK_API_KEY  # твой ключ

class DeepSeekAgentClient:
    def __init__(self):
        self.messages = [
            {
                "role": "system",
                "content": (
                    "Ты AI-помощник для собеседований по программированию. "
                    "Отвечай строго на русском языке во всех случаях, даже для SQL, Go или алгоритмов. "
                    "У тебя две задачи: "
                    "1) Если на входе код — проведи код ревью: оцени стиль, архитектуру, эффективность, возможные ошибки. "
                    "   Дай рекомендации по разделению ответственности у функций/структур и предложи улучшения. "
                    "Особенно внимательно смотри со стороны многгопоточки и оптимизации работы горутин. "
                    "2) Если на входе алгоритмическая задача — реши её на Go. "
                    "   Обязательно: добавь построчные комментарии к коду (как в ревью Pull Request). "
                    "   В комментариях объясни, что делает каждая ключевая строка. "
                    "   После кода объясни общий ход решения и оцени сложность (по времени и памяти). "
                    "   При возможности предложи, как сэкономить ресурсы (например, оптимизация памяти или времени). "
                    "3) Если на входе задача на SQL (создание таблиц или запрос) — ориентируйся на PostgreSQL. "
                    "Для выборки давай два варианта: простой и оптимизированный через JOIN/агрегаты. "
                    "В комментариях объясняй каждую ключевую строку и где использовать каждый вариант.\n\n"
                    "Форматируй ответы в Markdown с fenced code blocks, особенно для Go и SQL."
                )
            }
        ]

        self.agent = Agent(
            name="DeepSeek Agent",
            instructions="Используй системные сообщения для контекста. Отвечай в Markdown, сохраняй построчные комментарии для кода.",
            model="meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8",
            api_key=DEEPSEEK_API_KEY,
            base_url="https://api.intelligence.io.solutions/api/v1"
        )

    async def _run_workflow(self, code: str):
        conversation_history = "\n".join(
            [m["content"] for m in self.messages if m["role"] in ("system", "user")]
        )

        workflow = Workflow(objective=conversation_history + "\n" + code, client_mode=False)
        results = await workflow.custom(
            name="custom-task",
            objective=code,
            instructions="Используй предыдущий контекст и инструкции агента, отвечай в Markdown, соблюдая построчные комментарии для кода",
            agents=[self.agent],
        ).run_tasks()
        answer = results["results"]["custom-task"]
        self.messages.append({"role": "assistant", "content": answer})
        return answer

    def review_code(self, code: str, option: str = "результат") -> str | dict:

        prompt_map = {
            "result": (
                "Проанализируй данный код и покажи исходный фрагмент с комментариями, "
                "где есть ошибки или потенциальные проблемы, объясни, почему это ошибка. "
                "Если возможно, покажи также результат работы исходного кода (или что он бы вывел). "
                "После этого предоставь полностью исправленную версию кода, при возможности "
                "с оптимизацией и улучшениями. Объясни, что делает исправленный код, "
                "какой результат он даст и почему. "
                "Сохраняй структурированный стиль: сначала анализ ошибок и исходный код с результатом, "
                "потом исправленный рабочий вариант с пояснением и ожидаемым выводом."
            ),
            "code review": "Проведи код ревью: оцени стиль, архитектуру, эффективность, возможные ошибки. Добавь построчные комментарии.",
            "add func": (
                "Сначала кратко опиши, что требуется в задаче (одним-двумя предложениями). "
                "Затем напиши функционал, который решает задачу полностью и корректно. "
                "Обязательно дай два варианта реализации: "
                "1) Простой вариант (для наглядности и понятности). "
                "2) Оптимизированный вариант (для эффективности по памяти или времени). "
                "Для каждого варианта: "
                "- Добавь построчные комментарии, что делает каждая строка кода или запроса. "
                "- После реализации дай пояснение общего хода решения. "
                "- Укажи сложность по времени и памяти (если применимо). "
                "- Приведи пример использования функции или выполнения запроса для каждого варианта. "
                "Сохраняй строгую структуру: краткое описание задачи → простой вариант → оптимизированный вариант → сравнение двух вариантов (читаемость, эффективность, ресурсы)."
            ),
            "algorithm": (
                "Реши алгоритмическую задачу на Go. "
                "Обязательно дай два варианта решения: "
                "1) Простой, читаемый вариант. "
                "2) Оптимизированный вариант (по памяти или времени). "
                "Для каждого варианта: "
                "- Добавь построчные комментарии, что делает каждая строка. "
                "- После функции дай объяснение общего хода решения. "
                "- Укажи сложность по времени и памяти. "
                "- Приведи пример использования функции (main) для каждого варианта."
            ),
            "sql": (
                "Проанализируй задачу, создай таблицы, необходимые для её решения, и напиши SQL-запрос, который решает её полностью и корректно. "
                "Обязательно учитывай все условия задачи: фильтры, агрегаты, группировки, сортировку и связи между таблицами. "
                "Если в задаче упоминаются несколько показателей (например, количество клиентов, количество заказов, сумма, среднее), "
                "они все должны быть вычислены и включены в результат. "
                "Предоставь два варианта решения: простой и оптимизированный. "
                "В простом варианте делай акцент на наглядность и понятность, но соблюдай правильность и корректный синтаксис. "
                "В оптимизированном варианте делай запрос более эффективным: минимизируй количество обращений к таблицам, используй JOIN при необходимости, избегай лишних подзапросов, "
                "подбирай подходящие агрегатные функции и сортировки. "
                "В каждом варианте объясни каждую строку запроса простым языком. "
                "Проверяй корректность всех JOIN и при необходимости используй DISTINCT для подсчета уникальных клиентов. "
                "После этого дай краткое сравнение двух вариантов по эффективности, правильности, читаемости и использованию памяти/ресурсов. "
                "Сохраняй строгую структуру ответа: сначала простой вариант с пояснением, потом оптимизированный вариант с пояснением. "
                "Не пропускай условия сортировки, фильтрации и агрегации, даже если они кажутся очевидными."
            )
        }

        selected_prompt = prompt_map.get(option.lower(), "Дай подробный ответ по коду")

        self.messages.append({
            "role": "user",
            "content": f"{selected_prompt}\n\nКод/текст для анализа:\n{code}"
        })
        try:
            return asyncio.run(self._run_workflow(code))
        except Exception as e:
            print("[ERROR] Ошибка при запуске агент-клиента:", str(e))
            return {"error": str(e)}